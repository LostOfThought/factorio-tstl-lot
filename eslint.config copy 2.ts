/* eslint-disable jsdoc/no-missing-syntax, jsdoc/require-file-overview */
import eslintCommentsPlugin from '@eslint-community/eslint-plugin-eslint-comments';
import stylistic from '@stylistic/eslint-plugin';
import etcPlugin from 'eslint-plugin-etc';
import functionalPlugin from 'eslint-plugin-functional';
import importXPlugin from 'eslint-plugin-import-x';
import jsdocPlugin from 'eslint-plugin-jsdoc';
import nPlugin from 'eslint-plugin-n';
import noSecretsPlugin from 'eslint-plugin-no-secrets';
import perfectionistPlugin from 'eslint-plugin-perfectionist';
import preferArrowPlugin from 'eslint-plugin-prefer-arrow';
import promisePlugin from 'eslint-plugin-promise';
import regexpPlugin from 'eslint-plugin-regexp';
import securityPlugin from 'eslint-plugin-security';
import securityNodePlugin from 'eslint-plugin-security-node';
import sonarjsPlugin from 'eslint-plugin-sonarjs';
import tsdocPlugin from 'eslint-plugin-tsdoc';
import unicornPlugin from 'eslint-plugin-unicorn';
import unusedImportsPlugin from 'eslint-plugin-unused-imports';
import globalsImport from 'globals';
import tseslint from 'typescript-eslint';

import type { ESLint, Linter } from 'eslint';
import type { ReadonlyDeep } from 'type-fest';
import type { ConfigArray } from 'typescript-eslint';

type GlobalsInterface = Readonly<{
  es2025?: Readonly<Record<string, boolean>>;
  node?: Readonly<Record<string, boolean>>;
}>;

const globals: Readonly<GlobalsInterface> = globalsImport;

// eslint-disable-next-line functional/prefer-immutable-types, import-x/dynamic-import-chunkname
const rules: ReadonlyDeep<ConfigArray> = tseslint.config(

  /* Global ignores */
  {
    ignores: [
      'node_modules/',
      'dist/',
      'dist-tools/',
      'releases/',
      '**/*.lua',
      'pnpm-lock.yaml',
      'LICENSE.md',
      '.github/',
      '*.md',
    ],
  },

  /*
   * TypeScript-ESLint base configs
   * tseslint.configs.base provides parser, parserOptions for sourceType: "module"
   */
  tseslint.configs.base,

  ...tseslint.configs.strictTypeChecked,
  ...tseslint.configs.stylisticTypeChecked,

  {
    plugins: {
      '@eslint-community/eslint-comments': eslintCommentsPlugin as unknown as ESLint.Plugin,
    },
    rules: {
      '@eslint-community/eslint-comments/disable-enable-pair': 'error',
      '@eslint-community/eslint-comments/no-aggregating-enable': 'error',
      '@eslint-community/eslint-comments/no-duplicate-disable': 'error',
      '@eslint-community/eslint-comments/no-unlimited-disable': 'error',
      '@eslint-community/eslint-comments/no-unused-enable': 'error',
    },
  },
  {
    files: ['**/*.ts'],
    languageOptions: {

      /*
       * Parser is typically set by tseslint.configs.base
       * parserOptions can be extended here if needed, base already sets sourceType
       */
      globals: {},
      parserOptions: {
        ecmaVersion: 'latest',
        project: './tsconfig.json',
      },
    },
    plugins: {
      '@eslint-community/eslint-comments': eslintCommentsPlugin as unknown as ESLint.Plugin,
      '@stylistic': stylistic,
      'etc': etcPlugin as unknown as ESLint.Plugin,
      'functional': functionalPlugin,
      'import-x': importXPlugin,
      'jsdoc': jsdocPlugin,
      'n': nPlugin,
      'no-secrets': noSecretsPlugin,
      'perfectionist': perfectionistPlugin,
      'prefer-arrow': preferArrowPlugin as unknown as ESLint.Plugin,
      'promise': promisePlugin as unknown as ESLint.Plugin,
      'regexp': regexpPlugin,
      'security': securityPlugin as unknown as ESLint.Plugin,
      'sonarjs': sonarjsPlugin,
      'tsdoc': tsdocPlugin,
      'unicorn': unicornPlugin,
      'unused-imports': unusedImportsPlugin,
    },
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    rules: {
      // eslint-disable-next-line unicorn/no-useless-spread -- Keep thes together because they aren't prefixed
      ...{
        'accessor-pairs': 'error',
        'array-callback-return': ['error', {
          allowImplicit: false,
          checkForEach: true,
        }],
        'block-scoped-var': 'error',
        'camelcase': ['error', { properties: 'always' }],
        'capitalized-comments': ['error', 'always', { ignoreConsecutiveComments: false }],
        'class-methods-use-this': 'error',
        'complexity': ['error', 10],
        'consistent-return': 'error',
        'consistent-this': ['error', 'self'],
        'curly': ['error', 'all'],
        'default-case': 'error',
        'default-case-last': 'error',
        'default-param-last': 'error',
        'dot-notation': 'error',
        'eqeqeq': ['error', 'always'],
        'for-direction': 'error',
        'func-name-matching': 'error',
        'func-names': ['error', 'always'],
        'func-style': ['error', 'expression'],
        'grouped-accessor-pairs': ['error', 'getBeforeSet'],
        'guard-for-in': 'error',
        'id-denylist': ['error', 'callback', 'cb', 'data', 'err', 'e', 'temp', 'tmp'],
        'id-length': ['error', {
          exceptions: ['i', 'j', 'k', 'x', 'y', 'z', '_'],
          min: 2,
        }],
        'id-match': ['error', '^[a-zA-Z_$][a-zA-Z0-9_$]*$'],
        'logical-assignment-operators': ['error', 'always'],
        'max-classes-per-file': ['error', 1],
        'max-depth': ['error', 3],
        'max-lines': ['error', {
          max: 300,
          skipBlankLines: true,
          skipComments: true,
        }],
        'max-lines-per-function': ['error', {
          max: 50,
          skipBlankLines: true,
          skipComments: true,
        }],
        'max-nested-callbacks': ['error', 3],
        'max-params': ['error', 4],
        'max-statements': ['error', 15],
        'new-cap': 'error',
        'no-alert': 'error',
        'no-array-constructor': 'error',
        'no-await-in-loop': 'error',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-console': 'error',
        'no-constructor-return': 'error',
        'no-continue': 'error',
        'no-div-regex': 'error',
        'no-duplicate-imports': 'off', // Superceded by import-x/no-duplicates
        'no-else-return': ['error', { allowElseIf: false }],
        'no-empty': ['error', { allowEmptyCatch: false }],
        'no-empty-function': 'error',
        'no-eq-null': 'error',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-extra-bind': 'error',
        'no-extra-label': 'error',
        'no-implicit-coercion': 'error',
        'no-implicit-globals': 'error',
        'no-implied-eval': 'error',
        'no-inline-comments': 'off',
        'no-invalid-this': 'error',
        'no-iterator': 'error',
        'no-label-var': 'error',
        'no-labels': 'error',
        'no-lone-blocks': 'error',
        'no-lonely-if': 'error',
        'no-loop-func': 'error',
        'no-magic-numbers': 'off', // Superceded by @typescript-eslint/no-magic-numbers
        'no-multi-assign': 'error',
        'no-multi-str': 'error',
        'no-negated-condition': 'error',
        'no-nested-ternary': 'error',
        'no-new': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-object-constructor': 'error',
        'no-octal-escape': 'error',
        'no-param-reassign': ['error', { props: true }],
        'no-plusplus': ['error', { allowForLoopAfterthoughts: false }],
        'no-promise-executor-return': 'error',
        'no-proto': 'error',
        'no-restricted-exports': ['error', { restrictDefaultExports: { direct: true } }],
        'no-restricted-globals': ['error', 'event', 'fdescribe'],
        'no-restricted-syntax': [
          'error',
          'ForInStatement',
          'ForOfStatement',
          'WithStatement',
          'LabeledStatement',
        ],
        'no-return-assign': ['error', 'always'],
        'no-script-url': 'error',
        'no-self-compare': 'error',
        'no-sequences': 'error',
        'no-shadow': 'error',
        'no-template-curly-in-string': 'error',
        'no-ternary': 'error',
        'no-throw-literal': 'error',
        'no-undef-init': 'error',
        'no-undefined': 'error',
        'no-underscore-dangle': 'error',
        'no-unmodified-loop-condition': 'error',
        'no-unneeded-ternary': 'error',
        'no-unreachable-loop': 'error',
        'no-unused-expressions': ['error', {
          allowShortCircuit: false,
          allowTernary: false,
        }],
        'no-unused-private-class-members': 'error',
        'no-use-before-define': 'error',
        'no-useless-call': 'error',
        'no-useless-computed-key': 'error',
        'no-useless-concat': 'error',
        'no-useless-constructor': 'error',
        'no-useless-rename': 'error',
        'no-useless-return': 'error',
        'no-var': 'error',
        'no-void': 'error',
        'no-warning-comments': ['error', {
          location: 'anywhere',
          terms: ['todo', 'fixme', 'hack', 'xxx'],
        }],
        'no-with': 'error',
        'object-shorthand': ['error', 'always'],
        'one-var': ['error', 'never'],
        'operator-assignment': ['error', 'never'],
        'prefer-arrow-callback': 'error',
        'prefer-const': ['error', { destructuring: 'all' }],
        'prefer-destructuring': ['error', {
          array: true,
          object: true,
        }],
        'prefer-exponentiation-operator': 'error',
        'prefer-named-capture-group': 'error',
        'prefer-numeric-literals': 'error',
        'prefer-object-has-own': 'error',
        'prefer-object-spread': 'error',
        'prefer-promise-reject-errors': 'error',
        'prefer-regex-literals': 'error',
        'prefer-rest-params': 'error',
        'prefer-spread': 'error',
        'prefer-template': 'error',
        'radix': ['error', 'always'],
        'require-atomic-updates': 'error',
        'require-await': 'error',
        'require-unicode-regexp': 'error',
        'sort-keys': ['error', 'asc', { natural: true }],
        'sort-vars': 'error',
        'spaced-comment': ['error', 'always'],
        'strict': ['error', 'never'],
        'symbol-description': 'error',
        'vars-on-top': 'error',
        'yoda': ['error', 'never'],
      },
      '@typescript-eslint/adjacent-overload-signatures': 'error',
      '@typescript-eslint/array-type': ['error', { default: 'array-simple' }],
      '@typescript-eslint/await-thenable': 'error',
      '@typescript-eslint/ban-ts-comment': ['error', {
        'ts-check': false,
        'ts-expect-error': 'allow-with-description',
        'ts-ignore': false,
        'ts-nocheck': false,
      }],
      '@typescript-eslint/ban-tslint-comment': 'error',
      '@typescript-eslint/class-literal-property-style': ['error', 'fields'],
      '@typescript-eslint/class-methods-use-this': 'error',
      '@typescript-eslint/consistent-generic-constructors': ['error', 'constructor'],
      '@typescript-eslint/consistent-indexed-object-style': ['error', 'record'],
      '@typescript-eslint/consistent-type-assertions': ['error', {
        assertionStyle: 'as',
        objectLiteralTypeAssertions: 'never',
      }],
      '@typescript-eslint/consistent-type-definitions': ['error', 'type'],
      '@typescript-eslint/consistent-type-exports': 'error',
      '@typescript-eslint/consistent-type-imports': ['error', {
        fixStyle: 'separate-type-imports',
        prefer: 'type-imports',
      }],
      '@typescript-eslint/default-param-last': 'error',
      '@typescript-eslint/dot-notation': 'error',
      '@typescript-eslint/explicit-function-return-type': ['error', {
        allowExpressions: false,
        allowHigherOrderFunctions: false,
        allowTypedFunctionExpressions: false,
      }],
      '@typescript-eslint/explicit-member-accessibility': ['error', {
        accessibility: 'explicit',
      }],
      '@typescript-eslint/explicit-module-boundary-types': 'error',
      '@typescript-eslint/init-declarations': ['error', 'always'],
      '@typescript-eslint/max-params': ['error', { max: 3 }],
      '@typescript-eslint/member-ordering': 'error',
      '@typescript-eslint/method-signature-style': ['error', 'property'],
      '@typescript-eslint/naming-convention': [
        'error',
        {
          format: ['camelCase'],
          selector: 'default',
        },
        {
          format: ['camelCase', 'UPPER_CASE'],
          selector: 'variable',
        },
        {
          format: ['camelCase'],
          leadingUnderscore: 'allow',
          selector: 'parameter',
        },
        {
          format: ['camelCase'],
          leadingUnderscore: 'require',
          modifiers: ['private'],
          selector: 'memberLike',
        },
        {
          format: ['PascalCase'],
          selector: 'typeLike',
        },
        {
          format: ['UPPER_CASE'],
          selector: 'enumMember',
        },
      ],
      '@typescript-eslint/no-array-constructor': 'error',
      '@typescript-eslint/no-array-delete': 'error',
      '@typescript-eslint/no-base-to-string': 'error',
      '@typescript-eslint/no-confusing-non-null-assertion': 'error',
      '@typescript-eslint/no-confusing-void-expression': 'error',
      '@typescript-eslint/no-deprecated': 'error', // Migrated from: 'eslint-plugin-deprecation'
      '@typescript-eslint/no-dupe-class-members': 'error',
      '@typescript-eslint/no-duplicate-enum-values': 'error',
      '@typescript-eslint/no-duplicate-type-constituents': 'error',
      '@typescript-eslint/no-dynamic-delete': 'error',
      '@typescript-eslint/no-empty-function': 'error',
      '@typescript-eslint/no-empty-interface': 'error',
      '@typescript-eslint/no-empty-object-type': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-extra-non-null-assertion': 'error',
      '@typescript-eslint/no-extraneous-class': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/no-for-in-array': 'error',
      '@typescript-eslint/no-implied-eval': 'error',
      '@typescript-eslint/no-import-type-side-effects': 'error',
      '@typescript-eslint/no-inferrable-types': 'error',
      '@typescript-eslint/no-invalid-this': 'error',
      '@typescript-eslint/no-invalid-void-type': 'error',
      '@typescript-eslint/no-loop-func': 'error',
      '@typescript-eslint/no-loss-of-precision': 'error',
      '@typescript-eslint/no-magic-numbers': ['error', {
        detectObjects: false,
        enforceConst: true,
        ignore: [-1, 0, 1],
      }],
      '@typescript-eslint/no-meaningless-void-operator': 'error',
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/no-misused-promises': 'error',
      '@typescript-eslint/no-mixed-enums': 'error',
      '@typescript-eslint/no-namespace': 'error',
      '@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
      '@typescript-eslint/no-non-null-assertion': 'error',
      '@typescript-eslint/no-redeclare': 'error',
      '@typescript-eslint/no-redundant-type-constituents': 'error',
      '@typescript-eslint/no-require-imports': 'error',
      '@typescript-eslint/no-restricted-imports': 'error',
      '@typescript-eslint/no-shadow': 'error',
      '@typescript-eslint/no-this-alias': 'error',
      '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
      '@typescript-eslint/no-unnecessary-condition': 'error',
      '@typescript-eslint/no-unnecessary-parameter-property-assignment': 'error',
      '@typescript-eslint/no-unnecessary-qualifier': 'error',
      '@typescript-eslint/no-unnecessary-template-expression': 'error',
      '@typescript-eslint/no-unnecessary-type-arguments': 'error',
      '@typescript-eslint/no-unnecessary-type-assertion': 'error',
      '@typescript-eslint/no-unnecessary-type-constraint': 'error',
      '@typescript-eslint/no-unnecessary-type-parameters': 'error',
      '@typescript-eslint/no-unsafe-argument': 'error',
      '@typescript-eslint/no-unsafe-assignment': 'error',
      '@typescript-eslint/no-unsafe-call': 'error',
      '@typescript-eslint/no-unsafe-declaration-merging': 'error',
      '@typescript-eslint/no-unsafe-enum-comparison': 'error',
      '@typescript-eslint/no-unsafe-function-type': 'error',
      '@typescript-eslint/no-unsafe-member-access': 'error',
      '@typescript-eslint/no-unsafe-return': 'error',
      '@typescript-eslint/no-unsafe-unary-minus': 'error',
      '@typescript-eslint/no-unused-expressions': 'error',
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
          ignoreRestSiblings: false,
          varsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/no-use-before-define': ['error', {
        classes: true,
        enums: true,
        functions: true,
        typedefs: true,
        variables: true,
      }],
      '@typescript-eslint/no-useless-constructor': 'error',
      '@typescript-eslint/no-useless-empty-export': 'error',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/no-wrapper-object-types': 'error',
      '@typescript-eslint/non-nullable-type-assertion-style': 'error',
      '@typescript-eslint/only-throw-error': 'error',
      '@typescript-eslint/parameter-properties': ['error', {
        prefer: 'parameter-property',
      }],
      '@typescript-eslint/prefer-as-const': 'error',
      '@typescript-eslint/prefer-destructuring': ['error', {
        array: true,
        object: true,
      }],
      '@typescript-eslint/prefer-enum-initializers': 'error',
      '@typescript-eslint/prefer-find': 'error',
      '@typescript-eslint/prefer-for-of': 'error',
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/prefer-includes': 'error',
      '@typescript-eslint/prefer-literal-enum-member': 'error',
      '@typescript-eslint/prefer-namespace-keyword': 'error',
      '@typescript-eslint/prefer-nullish-coalescing': 'error',
      '@typescript-eslint/prefer-optional-chain': 'error',
      '@typescript-eslint/prefer-promise-reject-errors': 'error',
      '@typescript-eslint/prefer-readonly': 'error',
      '@typescript-eslint/prefer-readonly-parameter-types': 'error',
      '@typescript-eslint/prefer-reduce-type-parameter': 'error',
      '@typescript-eslint/prefer-regexp-exec': 'error',
      '@typescript-eslint/prefer-return-this-type': 'error',
      '@typescript-eslint/prefer-string-starts-ends-with': 'error',
      '@typescript-eslint/promise-function-async': 'error',
      '@typescript-eslint/require-array-sort-compare': 'error',
      '@typescript-eslint/require-await': 'error',
      '@typescript-eslint/restrict-plus-operands': 'error',
      '@typescript-eslint/restrict-template-expressions': 'error',
      '@typescript-eslint/return-await': ['error', 'always'],
      '@typescript-eslint/sort-type-constituents': 'error',
      '@typescript-eslint/strict-boolean-expressions': [
        'error',
        {
          allowAny: false,
          allowNullableBoolean: false,
          allowNullableNumber: false,
          allowNullableObject: false,
          allowNullableString: false,
          allowNumber: false,
          allowString: false,
        },
      ],
      '@typescript-eslint/switch-exhaustiveness-check': 'error',
      '@typescript-eslint/triple-slash-reference': 'error',
      '@typescript-eslint/typedef': 'off', // Depricated: --noImplicitAny and --strictPropertyInitialization compiler options
      '@typescript-eslint/unbound-method': 'error',
      '@typescript-eslint/unified-signatures': 'error',
      '@typescript-eslint/use-unknown-in-catch-callback-variable': 'error',
      'etc/no-assign-mutated-array': 'error',
      'etc/no-commented-out-code': 'error',
      'etc/no-const-enum': 'error',
      'etc/no-deprecated': [
        "error",
        {
          "ignored": {
            "^SomeName$": "name",
            "node_modules/some-path": "path"
          }
        }
      ],
      'etc/no-enum': 'error',
      'etc/no-implicit-any-catch': [
        "error",
        { "allowExplicitAny": false }
      ],
      'etc/no-internal': [
        "error",
        {
          "ignored": {
            "node_modules/some-path": "path",
            "^SomeName$": "name"
          }
        }
      ],
      'etc/no-misused-generics': 'error',
      "etc/no-t": [
        "error",
        { "prefix": "" }
      ],
      'etc/prefer-interface': 'off', // Heck no
      'etc/prefer-less-than': 'error',
      'etc/throw-error': 'error',
      'etc/underscore-internal': 'error',
      // eslint-disable-next-line import-x/dynamic-import-chunkname
      ...stylistic.configs.customize({
        arrowParens: true,
        braceStyle: '1tbs',
        // eslint-disable-next-line sonarjs/no-duplicate-string
        commaDangle: 'always-multiline',
        indent: 2,
        jsx: false,
        quotes: 'single',
        semi: true,
      }).rules,
      '@stylistic/array-bracket-newline': ['error', 'consistent'],
      '@stylistic/array-bracket-spacing': ['error', 'never'],
      '@stylistic/array-element-newline': ['error', 'consistent'],
      '@stylistic/arrow-parens': ['error', 'always'],
      '@stylistic/arrow-spacing': 'error',
      '@stylistic/block-spacing': ['error', 'always'],
      '@stylistic/brace-style': ['error', '1tbs', { allowSingleLine: false }],
      '@stylistic/comma-dangle': ['error', 'always-multiline'],
      '@stylistic/comma-spacing': 'error',
      '@stylistic/comma-style': ['error', 'last'],
      '@stylistic/computed-property-spacing': ['error', 'never'],
      '@stylistic/dot-location': ['error', 'property'],
      '@stylistic/eol-last': ['error', 'always'],
      '@stylistic/func-call-spacing': ['error', 'never'],
      '@stylistic/function-call-argument-newline': ['error', 'consistent'],
      '@stylistic/function-paren-newline': ['error', 'multiline-arguments'],
      '@stylistic/generator-star-spacing': ['error', 'after'],
      '@stylistic/implicit-arrow-linebreak': ['error', 'beside'],
      '@stylistic/indent': ['error', 2, { SwitchCase: 1 }],
      '@stylistic/key-spacing': 'error',
      '@stylistic/keyword-spacing': 'error',
      '@stylistic/line-comment-position': ['error', 'beside'],
      '@stylistic/linebreak-style': ['error', 'unix'],
      '@stylistic/lines-around-comment': ['error', {
        afterBlockComment: false,
        afterLineComment: false,
        beforeBlockComment: true,
        beforeLineComment: true,
      }],
      '@stylistic/lines-between-class-members': ['error', 'always'],
      '@stylistic/max-len': ['error', {
        code: 100,
        ignoreRegExpLiterals: false,
        ignoreStrings: false,
        ignoreTemplateLiterals: false,
        ignoreUrls: false,
        tabWidth: 2,
      }],
      '@stylistic/max-statements-per-line': ['error', { max: 1 }],
      '@stylistic/member-delimiter-style': 'error',
      '@stylistic/multiline-comment-style': ['error', 'starred-block'],
      '@stylistic/multiline-ternary': ['error', 'never'],
      '@stylistic/new-parens': 'error',
      '@stylistic/newline-per-chained-call': ['error', { ignoreChainWithDepth: 2 }],
      '@stylistic/no-confusing-arrow': 'error',
      '@stylistic/no-extra-parens': ['error', 'all'],
      '@stylistic/no-extra-semi': 'error',
      '@stylistic/no-floating-decimal': 'error',
      '@stylistic/no-mixed-operators': 'error',
      '@stylistic/no-mixed-spaces-and-tabs': 'error',
      '@stylistic/no-multi-spaces': 'error',
      '@stylistic/no-multiple-empty-lines': ['error', {
        max: 1,
        maxBOF: 0,
        maxEOF: 0,
      }],
      '@stylistic/no-tabs': 'error',
      '@stylistic/no-trailing-spaces': 'error',
      '@stylistic/no-whitespace-before-property': 'error',
      '@stylistic/nonblock-statement-body-position': ['error', 'beside'],
      '@stylistic/object-curly-newline': ['error', {
        consistent: true,
        multiline: true,
      }],
      '@stylistic/object-curly-spacing': ['error', 'always'],
      '@stylistic/object-property-newline': ['error', {
        allowAllPropertiesOnSameLine: false,
      }],
      '@stylistic/one-var-declaration-per-line': ['error', 'always'],
      '@stylistic/operator-linebreak': ['error', 'before'],
      '@stylistic/padded-blocks': ['error', 'never'],
      '@stylistic/padding-line-between-statements': [
        'error',
        {
          blankLine: 'always',
          next: 'return',
          prev: '*',
        },
        {
          blankLine: 'always',
          next: '*',
          prev: ['const', 'let', 'var'],
        },
        {
          blankLine: 'any',
          next: ['const', 'let', 'var'],
          prev: ['const', 'let', 'var'],
        },
      ],
      '@stylistic/quote-props': ['error', 'consistent-as-needed'],
      '@stylistic/quotes': ['error', 'single', { avoidEscape: false }],
      '@stylistic/rest-spread-spacing': ['error', 'never'],
      '@stylistic/semi': ['error', 'always'],
      '@stylistic/semi-spacing': 'error',
      '@stylistic/semi-style': ['error', 'last'],
      '@stylistic/space-before-blocks': ['error', 'always'],
      '@stylistic/space-before-function-paren': ['error', {
        anonymous: 'never',
        asyncArrow: 'always',
        named: 'never',
      }],
      '@stylistic/space-in-parens': ['error', 'never'],
      '@stylistic/space-infix-ops': 'error',
      '@stylistic/space-unary-ops': 'error',
      '@stylistic/spaced-comment': ['error', 'always'],
      '@stylistic/switch-colon-spacing': 'error',
      '@stylistic/template-curly-spacing': ['error', 'never'],
      '@stylistic/template-tag-spacing': ['error', 'never'],
      '@stylistic/type-annotation-spacing': 'error',
      '@stylistic/type-generic-spacing': 'error',
      '@stylistic/type-named-tuple-spacing': 'error',
      '@stylistic/wrap-iife': ['error', 'inside'],
      '@stylistic/wrap-regex': 'error',
      '@stylistic/yield-star-spacing': ['error', 'after'],
      ...sonarjsPlugin.configs.recommended.rules,
      'sonarjs/cognitive-complexity': ['error', 10],
      'sonarjs/max-switch-cases': ['error', 5],
      'sonarjs/no-duplicate-string': ['error', { threshold: 2 }],
      'sonarjs/no-identical-functions': 'error',
      'sonarjs/no-nested-switch': 'error',
      'sonarjs/no-nested-template-literals': 'error',
      ...unicornPlugin.configs.recommended.rules,
      'unicorn/better-regex': 'error',
      'unicorn/catch-error-name': ['error', { name: 'error' }],
      'unicorn/consistent-destructuring': 'error',
      'unicorn/consistent-function-scoping': 'error',
      'unicorn/custom-error-definition': 'error',
      'unicorn/empty-brace-spaces': 'error',
      'unicorn/error-message': 'error',
      'unicorn/escape-case': 'error',
      'unicorn/expiring-todo-comments': 'error',
      'unicorn/explicit-length-check': 'error',
      'unicorn/filename-case': ['error', { case: 'kebabCase' }],
      'unicorn/import-style': 'error',
      'unicorn/new-for-builtins': 'error',
      'unicorn/no-abusive-eslint-disable': 'error',
      'unicorn/no-anonymous-default-export': 'error',
      'unicorn/no-array-callback-reference': 'error',
      'unicorn/no-array-for-each': 'error',
      'unicorn/no-array-method-this-argument': 'error',
      'unicorn/no-array-push-push': 'error',
      'unicorn/no-array-reduce': 'error',
      'unicorn/no-await-expression-member': 'error',
      'unicorn/no-console-spaces': 'error',
      'unicorn/no-document-cookie': 'error',
      'unicorn/no-empty-file': 'error',
      'unicorn/no-for-loop': 'error',
      'unicorn/no-hex-escape': 'error',
      'unicorn/no-instanceof-array': 'error',
      'unicorn/no-invalid-fetch-options': 'error',
      'unicorn/no-invalid-remove-event-listener': 'error',
      'unicorn/no-keyword-prefix': 'error',
      'unicorn/no-lonely-if': 'error',
      'unicorn/no-magic-array-flat-depth': 'error',
      'unicorn/no-negated-condition': 'error',
      'unicorn/no-negation-in-equality-check': 'error',
      'unicorn/no-nested-ternary': 'error',
      'unicorn/no-new-array': 'error',
      'unicorn/no-new-buffer': 'error',
      'unicorn/no-null': 'off',
      'unicorn/no-object-as-default-parameter': 'error',
      'unicorn/no-process-exit': 'error',
      'unicorn/no-single-promise-in-promise-methods': 'error',
      'unicorn/no-static-only-class': 'error',
      'unicorn/no-thenable': 'error',
      'unicorn/no-this-assignment': 'error',
      'unicorn/no-typeof-undefined': 'error',
      'unicorn/no-unnecessary-await': 'error',
      'unicorn/no-unnecessary-polyfills': 'error',
      'unicorn/no-unreadable-array-destructuring': 'error',
      'unicorn/no-unreadable-iife': 'error',
      'unicorn/no-unused-properties': 'error',
      'unicorn/no-useless-fallback-in-spread': 'error',
      'unicorn/no-useless-length-check': 'error',
      'unicorn/no-useless-promise-resolve-reject': 'error',
      'unicorn/no-useless-spread': 'error',
      'unicorn/no-useless-switch-case': 'error',
      'unicorn/no-useless-undefined': 'error',
      'unicorn/no-zero-fractions': 'error',
      'unicorn/number-literal-case': 'error',
      'unicorn/numeric-separators-style': 'error',
      'unicorn/prefer-add-event-listener': 'error',
      'unicorn/prefer-array-find': 'error',
      'unicorn/prefer-array-flat': 'error',
      'unicorn/prefer-array-flat-map': 'error',
      'unicorn/prefer-array-index-of': 'error',
      'unicorn/prefer-array-some': 'error',
      'unicorn/prefer-at': 'error',
      'unicorn/prefer-blob-reading-methods': 'error',
      'unicorn/prefer-code-point': 'error',
      'unicorn/prefer-date-now': 'error',
      'unicorn/prefer-default-parameters': 'error',
      'unicorn/prefer-dom-node-append': 'error',
      'unicorn/prefer-dom-node-dataset': 'error',
      'unicorn/prefer-dom-node-remove': 'error',
      'unicorn/prefer-dom-node-text-content': 'error',
      'unicorn/prefer-event-target': 'error',
      'unicorn/prefer-export-from': 'error',
      'unicorn/prefer-includes': 'error',
      'unicorn/prefer-json-parse-buffer': 'error',
      'unicorn/prefer-keyboard-event-key': 'error',
      'unicorn/prefer-logical-operator-over-ternary': 'error',
      'unicorn/prefer-math-trunc': 'error',
      'unicorn/prefer-modern-dom-apis': 'error',
      'unicorn/prefer-modern-math-apis': 'error',
      'unicorn/prefer-module': 'error',
      'unicorn/prefer-native-coercion-functions': 'error',
      'unicorn/prefer-negative-index': 'error',
      'unicorn/prefer-node-protocol': 'error',
      'unicorn/prefer-number-properties': 'error',
      'unicorn/prefer-object-from-entries': 'error',
      'unicorn/prefer-optional-catch-binding': 'error',
      'unicorn/prefer-prototype-methods': 'error',
      'unicorn/prefer-query-selector': 'error',
      'unicorn/prefer-reflect-apply': 'error',
      'unicorn/prefer-regexp-test': 'error',
      'unicorn/prefer-set-has': 'error',
      'unicorn/prefer-set-size': 'error',
      'unicorn/prefer-spread': 'error',
      'unicorn/prefer-string-replace-all': 'error',
      'unicorn/prefer-string-slice': 'error',
      'unicorn/prefer-string-starts-ends-with': 'error',
      'unicorn/prefer-string-trim-start-end': 'error',
      'unicorn/prefer-switch': 'error',
      'unicorn/prefer-ternary': 'error',
      'unicorn/prefer-top-level-await': 'error',
      'unicorn/prefer-type-error': 'error',
      'unicorn/prevent-abbreviations': ['error', {
        replacements: {
          args: false,
          props: false,
          ref: false,
          refs: false,
        },
      }],
      'unicorn/relative-url-style': ['error', 'always'],
      'unicorn/require-array-join-separator': 'error',
      'unicorn/require-number-to-fixed-digits-argument': 'error',
      'unicorn/require-post-message-target-origin': 'error',
      'unicorn/string-content': 'error',
      'unicorn/switch-case-braces': ['error', 'always'],
      'unicorn/template-indent': 'error',
      'unicorn/text-encoding-identifier-case': 'error',
      'unicorn/throw-new-error': 'error',
      ...importXPlugin.configs.recommended.rules,
      ...importXPlugin.configs.typescript.rules,
      'import-x/consistent-type-specifier-style': ['error', 'prefer-top-level'],
      'import-x/dynamic-import-chunkname': 'error',
      'import-x/export': 'error',
      'import-x/exports-last': 'error',
      'import-x/extensions': ['error', 'never', { json: 'always' }],
      'import-x/first': 'error',
      'import-x/group-exports': 'error',
      'import-x/max-dependencies': ['error', { max: 10 }],
      'import-x/named': 'error',
      'import-x/namespace': 'error',
      'import-x/newline-after-import': 'error',
      'import-x/no-absolute-path': 'error',
      'import-x/no-amd': 'error',
      'import-x/no-anonymous-default-export': 'error',
      'import-x/no-commonjs': 'error',
      'import-x/no-cycle': 'error',
      'import-x/no-default-export': 'error',
      'import-x/no-deprecated': 'error',
      'import-x/no-duplicates': 'off', // I want this on, but it triggers for type only imports as well
      'import-x/no-dynamic-require': 'error',
      'import-x/no-empty-named-blocks': 'error',
      'import-x/no-extraneous-dependencies': [
        'error',
        {
          devDependencies: false,
          includeInternal: true,
          includeTypes: true,
          optionalDependencies: false,
          peerDependencies: false,
        },
      ],
      'import-x/no-import-module-exports': 'error',
      'import-x/no-internal-modules': 'error',
      'import-x/no-mutable-exports': 'error',
      'import-x/no-named-as-default': 'error',
      'import-x/no-named-as-default-member': 'error',
      'import-x/no-named-default': 'error',
      'import-x/no-namespace': 'error',
      'import-x/no-nodejs-modules': 'error',
      'import-x/no-relative-packages': 'error',
      'import-x/no-relative-parent-imports': 'error',
      'import-x/no-restricted-paths': 'error',
      'import-x/no-self-import': 'error',
      'import-x/no-unassigned-import': 'error',
      'import-x/no-unresolved': [
        'error',
        {
          amd: true,
          commonjs: true,
          ignore: ['^lua-types/.*', '^typed-factorio/.*'],
        },
      ],
      'import-x/no-unused-modules': 'error',
      'import-x/no-useless-path-segments': 'error',
      'import-x/no-webpack-loader-syntax': 'error',
      'import-x/order': [
        'error',
        {
          'alphabetize': {
            caseInsensitive: false,
            order: 'asc',
            orderImportKind: 'asc',
          },
          'distinctGroup': true,
          'groups': [
            'builtin',
            'external',
            'internal',
            'parent',
            'sibling',
            'index',
            'object',
            'type',
          ],
          'newlines-between': 'always',
          'pathGroups': [
            {
              group: 'internal',
              pattern: '@/**',
            },
          ],
          // eslint-disable-next-line no-secrets/no-secrets
          'pathGroupsExcludedImportTypes': ['type'],
          'warnOnUnassignedImports': true,
        },
      ],
      'import-x/prefer-default-export': 'off', // Conflicts with no-default-export
      ...functionalPlugin.configs.all.rules,
      'functional/functional-parameters': ['error', {
        allowArgumentsKeyword: false,
        allowRestParameter: false,
        enforceParameterCount: {
          count: 'atLeastOne',
          ignoreIIFE: false,
        },
      }],
      'functional/immutable-data': ['error', {
        ignoreClasses: false,
        ignoreImmediateMutation: false,
        ignoreNonConstDeclarations: false,
      }],
      'functional/no-classes': 'error',
      'functional/no-conditional-statements': ['error', {
        allowReturningBranches: false,
      }],
      'functional/no-expression-statements': ['error', {
        ignoreCodePattern: [],
        ignoreVoid: false,
      }],
      'functional/no-let': ['error', {
        allowInForLoopInit: false,
        allowInFunctions: false,
        ignoreIdentifierPattern: [],
      }],
      'functional/no-loop-statements': 'error',
      'functional/no-mixed-types': 'error',
      'functional/no-promise-reject': 'error',
      'functional/no-return-void': 'error',
      'functional/no-this-expressions': 'error',
      'functional/no-throw-statements': 'error',
      'functional/no-try-statements': 'error',
      'functional/prefer-immutable-types': ['error', {
        enforcement: 'Immutable',
        fixer: {
          Immutable: {
            pattern: '^(.*)$',
            replace: 'ReadonlyDeep<$1>',
          },
        },
        ignoreInferredTypes: false,
        overrides: [],
        parameters: {
          enforcement: 'Immutable',
        },
        returnTypes: {
          enforcement: 'Immutable',
        },
        variables: {
          enforcement: 'Immutable',
        },
      }],
      'functional/prefer-property-signatures': 'error',
      'functional/prefer-readonly-type': 'off', // Depricated: functional/prefer-immutable-types, functional/type-declaration-immutability
      'functional/prefer-tacit': ['error', {
        checkMemberExpressions: true,
      }],
      'functional/readonly-type': 'error',
      'functional/type-declaration-immutability': 'error',
      'no-secrets/no-secrets': ['error', {
        additionalRegexes: {},
        tolerance: 4,
      }],
      ...perfectionistPlugin.configs['recommended-natural'].rules,
      'perfectionist/sort-array-includes': 'error',
      'perfectionist/sort-classes': 'error',
      'perfectionist/sort-enums': 'error',
      'perfectionist/sort-exports': 'error',
      'perfectionist/sort-imports': 'off', // Let import-x handle this
      'perfectionist/sort-interfaces': 'error',
      'perfectionist/sort-intersection-types': 'error',
      'perfectionist/sort-jsx-props': 'error',
      'perfectionist/sort-maps': 'error',
      'perfectionist/sort-named-exports': 'error',
      'perfectionist/sort-named-imports': 'error',
      'perfectionist/sort-object-types': 'error',
      'perfectionist/sort-objects': [
        'error',
        {
          customGroups: {},
          groups: [],
          ignoreCase: false,
          ignorePattern: [],
          newlinesBetween: 'never',
          order: 'asc',
          partitionByComment: true,
          partitionByNewLine: false,
          type: 'natural',
        },
      ],
      'perfectionist/sort-sets': 'error',
      'perfectionist/sort-switch-case': 'error',
      'perfectionist/sort-union-types': 'error',
      'perfectionist/sort-variable-declarations': 'error',
      // eslint-disable-next-line sonarjs/no-duplicate-string
      ...nPlugin.configs['flat/recommended'].rules,
      'n/callback-return': 'error',
      'n/exports-style': ['error', 'module.exports'],
      'n/file-extension-in-import': ['error', 'never'],
      'n/global-require': 'error',
      'n/handle-callback-err': 'error',
      'n/no-callback-literal': 'error',
      'n/no-missing-import': 'off', // Redundant with Typescript
      'n/no-missing-require': 'error',
      'n/no-mixed-requires': 'error',
      'n/no-new-require': 'error',
      'n/no-path-concat': 'error',
      'n/no-process-env': 'error',
      'n/no-process-exit': 'error',
      'n/no-restricted-import': 'error',
      'n/no-restricted-require': 'error',
      'n/no-sync': 'error',
      'n/prefer-global/buffer': 'error',
      'n/prefer-global/console': 'error',
      'n/prefer-global/process': 'error',
      'n/prefer-global/text-decoder': 'error',
      'n/prefer-global/text-encoder': 'error',
      'n/prefer-global/url': 'error',
      'n/prefer-global/url-search-params': 'error',
      'n/prefer-promises/dns': 'error',
      'n/prefer-promises/fs': 'error',
      'tsdoc/syntax': 'error',
      ...jsdocPlugin.configs['flat/recommended-typescript-error'].rules,
      'jsdoc/check-access': 'error',
      'jsdoc/check-alignment': 'error',
      'jsdoc/check-examples': 'error',
      'jsdoc/check-indentation': 'error',
      'jsdoc/check-line-alignment': 'error',
      'jsdoc/check-param-names': 'error',
      'jsdoc/check-property-names': 'error',
      'jsdoc/check-syntax': 'error',
      'jsdoc/check-tag-names': 'error',
      'jsdoc/check-types': 'error',
      'jsdoc/check-values': 'error',
      'jsdoc/convert-to-jsdoc-comments': 'error',
      'jsdoc/empty-tags': 'error',
      'jsdoc/implements-on-classes': 'error',
      'jsdoc/informative-docs': 'error',
      'jsdoc/match-description': 'error',
      'jsdoc/match-name': 'error',
      'jsdoc/multiline-blocks': 'error',
      'jsdoc/no-bad-blocks': 'error',
      'jsdoc/no-blank-block-descriptions': 'error',
      'jsdoc/no-blank-blocks': 'error',
      'jsdoc/no-defaults': 'error',
      'jsdoc/no-missing-syntax': 'error',
      'jsdoc/no-multi-asterisks': 'error',
      'jsdoc/no-restricted-syntax': 'error',
      'jsdoc/no-types': 'error',
      'jsdoc/no-undefined-types': 'error',
      'jsdoc/require-asterisk-prefix': 'error',
      'jsdoc/require-description': 'error',
      'jsdoc/require-description-complete-sentence': 'error',
      'jsdoc/require-example': 'error',
      'jsdoc/require-file-overview': 'error',
      'jsdoc/require-hyphen-before-param-description': 'error',
      'jsdoc/require-jsdoc': 'error',
      'jsdoc/require-param': 'error',
      'jsdoc/require-param-description': 'error',
      'jsdoc/require-param-name': 'error',
      'jsdoc/require-param-type': 'off', // TypeScript handles this
      'jsdoc/require-property': 'error',
      'jsdoc/require-property-description': 'error',
      'jsdoc/require-property-name': 'error',
      'jsdoc/require-property-type': 'off', // TypeScript handles this
      'jsdoc/require-returns': 'error',
      'jsdoc/require-returns-check': 'error',
      'jsdoc/require-returns-description': 'error',
      'jsdoc/require-returns-type': 'off', // TypeScript handles this
      'jsdoc/require-template': 'error',
      'jsdoc/require-throws': 'error',
      'jsdoc/require-yields': 'error',
      'jsdoc/require-yields-check': 'error',
      'jsdoc/sort-tags': 'error',
      'jsdoc/tag-lines': ['error', 'never', { startLines: 1 }],
      'jsdoc/text-escaping': 'error',
      'jsdoc/valid-types': 'error',
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      ...regexpPlugin.configs['flat/all'].rules,
      'regexp/confusing-quantifier': 'error',
      'regexp/control-character-escape': 'error',
      'regexp/grapheme-string-literal': 'error',
      'regexp/hexadecimal-escape': 'error',
      'regexp/letter-case': 'error',
      'regexp/match-any': 'error',
      'regexp/negation': 'error',
      'regexp/no-contradiction-with-assertion': 'error',
      'regexp/no-control-character': 'error',
      'regexp/no-dupe-characters-character-class': 'error',
      'regexp/no-dupe-disjunctions': 'error',
      'regexp/no-empty-alternative': 'error',
      'regexp/no-empty-capturing-group': 'error',
      'regexp/no-empty-character-class': 'error',
      'regexp/no-empty-group': 'error',
      'regexp/no-empty-lookarounds-assertion': 'error',
      'regexp/no-empty-string-literal': 'error',
      'regexp/no-escape-backspace': 'error',
      'regexp/no-extra-lookaround-assertions': 'error',
      'regexp/no-invalid-regexp': 'error',
      'regexp/no-invisible-character': 'error',
      'regexp/no-lazy-ends': 'error',
      'regexp/no-legacy-features': 'error',
      'regexp/no-misleading-capturing-group': 'error',
      'regexp/no-misleading-unicode-character': 'error',
      'regexp/no-missing-g-flag': 'error',
      'regexp/no-non-standard-flag': 'error',
      'regexp/no-obscure-range': 'error',
      'regexp/no-octal': 'error',
      'regexp/no-optional-assertion': 'error',
      'regexp/no-potentially-useless-backreference': 'error',
      'regexp/no-standalone-backslash': 'error',
      'regexp/no-super-linear-backtracking': 'error',
      'regexp/no-super-linear-move': 'error',
      'regexp/no-trivially-nested-assertion': 'error',
      'regexp/no-trivially-nested-quantifier': 'error',
      'regexp/no-unused-capturing-group': 'error',
      'regexp/no-useless-assertions': 'error',
      'regexp/no-useless-backreference': 'error',
      'regexp/no-useless-character-class': 'error',
      'regexp/no-useless-dollar-replacements': 'error',
      'regexp/no-useless-escape': 'error',
      'regexp/no-useless-flag': 'error',
      'regexp/no-useless-lazy': 'error',
      'regexp/no-useless-non-capturing-group': 'error',
      'regexp/no-useless-quantifier': 'error',
      'regexp/no-useless-range': 'error',
      'regexp/no-useless-set-operand': 'error',
      'regexp/no-useless-string-literal': 'error',
      'regexp/no-useless-two-nums-quantifier': 'error',
      'regexp/no-zero-quantifier': 'error',
      'regexp/optimal-lookaround-quantifier': 'error',
      'regexp/optimal-quantifier-concatenation': 'error',
      'regexp/prefer-character-class': 'error',
      'regexp/prefer-d': 'error',
      'regexp/prefer-escape-replacement-dollar-char': 'error',
      'regexp/prefer-lookaround': 'error',
      'regexp/prefer-named-backreference': 'error',
      'regexp/prefer-named-capture-group': 'error',
      'regexp/prefer-named-replacement': 'error',
      'regexp/prefer-plus-quantifier': 'error',
      'regexp/prefer-predefined-assertion': 'error',
      'regexp/prefer-quantifier': 'error',
      'regexp/prefer-question-quantifier': 'error',
      'regexp/prefer-range': 'error',
      'regexp/prefer-regexp-exec': 'error',
      'regexp/prefer-regexp-test': 'error',
      'regexp/prefer-result-array-groups': 'error',
      'regexp/prefer-set-operation': 'error',
      'regexp/prefer-star-quantifier': 'error',
      'regexp/prefer-unicode-codepoint-escapes': 'error',
      'regexp/prefer-w': 'error',
      'regexp/require-unicode-regexp': 'error',
      'regexp/require-unicode-sets-regexp': 'error',
      'regexp/simplify-set-operations': 'error',
      'regexp/sort-alternatives': 'error',
      'regexp/sort-character-class-elements': 'error',
      'regexp/sort-flags': 'error',
      'regexp/strict': 'error',
      'regexp/unicode-escape': 'error',
      'regexp/unicode-property': 'error',
      'regexp/use-ignore-case': 'error',
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      ...securityPlugin.configs.recommended.rules,
      'prefer-arrow/prefer-arrow-functions': ['error', {
        // eslint-disable-next-line unicorn/no-keyword-prefix
        classPropertiesAllowed: false,
        disallowPrototype: true,
        singleReturnOnly: false,
      }],
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      ...promisePlugin.configs['flat/recommended'].rules,
      'promise/always-return': 'error',
      'promise/avoid-new': 'error',
      'promise/catch-or-return': ['error', { allowFinally: false }],
      'promise/no-callback-in-promise': 'error',
      'promise/no-multiple-resolved': 'error',
      'promise/no-native': 'off',
      'promise/no-nesting': 'error',
      'promise/no-new-statics': 'error',
      'promise/no-promise-in-callback': 'error',
      'promise/no-return-in-finally': 'error',
      'promise/no-return-wrap': 'error',
      'promise/param-names': 'error',
      'promise/prefer-await-to-callbacks': 'error',
      'promise/prefer-await-to-then': 'error',
      'promise/valid-params': 'error',
      'unused-imports/no-unused-imports': 'error',
      'unused-imports/no-unused-vars': [
        'error',
        {
          args: 'after-used',
          argsIgnorePattern: '^_',
          caughtErrors: 'all',
          caughtErrorsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
          vars: 'all',
          varsIgnorePattern: '^_',
        },
      ],
    },
    settings: {
      'import-x/resolver': {
        typescript: true,
      },
      'jsdoc': {
        mode: 'typescript',
      },
    },
  },

  {
    files: ['src/control/**/*.ts'],
    languageOptions: {
      globals: { ...globals.es2025 },
      parserOptions: { project: './tsconfig.control.json' },
    },
  },

  {
    files: ['src/data/**/*.ts'],
    languageOptions: {
      globals: { ...globals.es2025 },
      parserOptions: { project: './tsconfig.data.json' },
    },
  },

  {
    files: ['src/settings/**/*.ts'],
    languageOptions: {
      globals: { ...globals.es2025 },
      parserOptions: { project: './tsconfig.settings.json' },
    },
  },

  {
    files: ['src/**/*.ts'],
    ignores: ['src/control/**/*', 'src/data/**/*', 'src/settings/**/*'],
    languageOptions: {
      globals: { ...globals.es2025 }, // Removed optional chaining here
      parserOptions: { project: './tsconfig.json' }, // General tsconfig for other src files
    },
  },

  {

    /*
     * Factorio entry points.
     * Do not remove this block!
     */
    files: [
      'src/control/control.ts',
      'src/data/data.ts',
      'src/data/data-updates.ts',
      'src/data/data-final-fixes.ts',
      'src/settings/settings.ts',
      'src/settings/settings-updates.ts',
      'src/settings/settings-final-fixes.ts',
    ],
    rules: {
      'unicorn/no-empty-file': 'off',
    },
  },

  /* Configuration for tools directory */
  {
    files: ['tools/**/*.ts'],
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.es2025,
      },
      parserOptions: { project: './tools/tsconfig.json' },
    },
    plugins: {
      'security-node': securityNodePlugin as unknown as ESLint.Plugin,
    },
    rules: {
      'import-x/no-nodejs-modules': 'off',
      'n/no-extraneous-import': 'off', // Allow importing devDependencies
      'n/no-unpublished-import': 'off', // Allow importing devDependencies
      'no-console': 'off',

      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      ...securityNodePlugin.configs.recommended.rules as Partial<Record<string, Linter.RuleEntry>>,
    },
  },

  {
    files: ['eslint.config.ts'],
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.es2025,
      },
      parserOptions: { project: './tsconfig.eslint.json' },
    },
    rules: {
      // eslint-disable-next-line unicorn/no-useless-spread
      ...{
        'max-lines': 'off',
        'no-console': 'off',
      },
      '@eslint-community/eslint-comments/disable-enable-pair': 'off',
      '@stylistic/max-len': 'off',
      '@typescript-eslint/naming-convention': 'off',
      '@typescript-eslint/no-magic-numbers': 'off',
      'import-x/max-dependencies': 'off',
      'import-x/no-extraneous-dependencies': 'off',
      'import-x/no-nodejs-modules': 'off',
      'n/no-extraneous-import': 'off',
      'n/no-unpublished-import': 'off',
    },
  },
);

// eslint-disable-next-line no-restricted-exports, import-x/no-default-export
export default rules;
