name: Create Release

on:
  push:
    tags:
      - 'v*' # Trigger on tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history and tags

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's Node.js version
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # At this point, the version is already bumped (e.g., in package.json or info.json)
      # and changelog.txt is generated by your tools/bundle-mod.ts script (or your release process).
      # This CI job just needs to build and package the release artifacts.

      - name: Build the project for CI Release
        run: pnpm run package:ci # Assumes you created a 'package:ci' script in package.json
                                # Or directly: pnpm vite-node tools/bundle-mod.ts --ci-build --output-path dist/
                                # The --output-path is an example if your script can direct output.

      - name: Prepare Release Artifacts
        id: prep_artifacts
        run: |
          # This step prepares the artifact for uploading.
          # It now expects tools/bundle-mod.ts --ci-build (via pnpm run package:ci) 
          # to produce a correctly named artifact in the 'dist' directory.

          ARTIFACT_NAME_DEFAULT="project-${{ github.ref_name }}.zip" # Fallback name
          ARTIFACT_PATH_DEFAULT="./${ARTIFACT_NAME_DEFAULT}" # Fallback path

          if [ -f "package.json" ]; then
            PROJECT_NAME=$(jq -r .name package.json | sed 's/@//g; s/\//-/g')
            PROJECT_VERSION=$(jq -r .version package.json) # This should be the tagged version
          elif [ -f "info.json" ]; then # For Factorio mods
            PROJECT_NAME=$(jq -r .name info.json)
            PROJECT_VERSION=$(jq -r .version info.json) # This should be the tagged version
          else 
            echo "Warning: Could not determine project name or version from package.json or info.json."
            PROJECT_NAME="unknown_project"
            PROJECT_VERSION="${{ github.ref_name }}" # Use tag name as version (e.g., v1.0.0)
          fi
          
          # Sanitize PROJECT_VERSION to remove 'v' prefix if present, for artifact naming consistency
          PROJECT_VERSION_CLEANED=$(echo "${PROJECT_VERSION}" | sed 's/^v//')

          EXPECTED_ARTIFACT_FILENAME="${PROJECT_NAME}_${PROJECT_VERSION_CLEANED}.zip"
          
          echo "Looking for artifact: dist/${EXPECTED_ARTIFACT_FILENAME}"

          if [ -f "dist/${EXPECTED_ARTIFACT_FILENAME}" ]; then
            # Move to root for upload, or use directly from dist/ if preferred by upload action
            mv "dist/${EXPECTED_ARTIFACT_FILENAME}" "./${EXPECTED_ARTIFACT_FILENAME}"
            ARTIFACT_PATH="./${EXPECTED_ARTIFACT_FILENAME}"
            ARTIFACT_NAME="${EXPECTED_ARTIFACT_FILENAME}"
            echo "Found and prepared expected artifact: ${ARTIFACT_NAME}"
          elif [ -d "dist" ] && [ "$(ls -A dist/*.zip 2>/dev/null)" ]; then
            SOURCE_ZIP=$(find dist -name "*.zip" -print -quit)
            echo "Warning: Expected artifact 'dist/${EXPECTED_ARTIFACT_FILENAME}' not found."
            echo "Using first available zip from dist/: ${SOURCE_ZIP} and renaming."
            mv "${SOURCE_ZIP}" "./${EXPECTED_ARTIFACT_FILENAME}" # Rename to expected name
            ARTIFACT_PATH="./${EXPECTED_ARTIFACT_FILENAME}"
            ARTIFACT_NAME="${EXPECTED_ARTIFACT_FILENAME}"
          else
            echo "Error: No release artifact found in dist/."
            # Create a dummy zip as a last resort, but this indicates a build problem.
            echo "Creating a placeholder zip of the workspace as a fallback."
            zip -r "${ARTIFACT_NAME_DEFAULT}" . -x ".git/*" -x ".github/*" -x "node_modules/*"
            ARTIFACT_PATH="${ARTIFACT_PATH_DEFAULT}"
            ARTIFACT_NAME="${ARTIFACT_NAME_DEFAULT}"
            echo "Created placeholder artifact: ${ARTIFACT_NAME}"
          fi
          
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "artifact_path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # e.g., v1.0.0
          release_name: Release ${{ github.ref_name }}
          body_path: changelog.txt # Assumes changelog.txt is generated and committed by your release process
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prep_artifacts.outputs.artifact_path }}
          asset_name: ${{ steps.prep_artifacts.outputs.artifact_name }}
          asset_content_type: application/zip 