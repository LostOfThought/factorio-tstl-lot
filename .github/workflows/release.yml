name: Create Release

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v1.2.3, etc.

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and upload assets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history and tags

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Or your project's Node.js version
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the project for CI Release
        run: pnpm run package:ci

      - name: Prepare Release Artifacts
        id: prep_artifacts
        run: |
          ARTIFACT_NAME_DEFAULT="project-${{ github.ref_name }}.zip" # Fallback name
          ARTIFACT_PATH_DEFAULT="./${ARTIFACT_NAME_DEFAULT}" # Fallback path

          ARTIFACT_PATH=""
          ARTIFACT_NAME="" # Will be set if a valid artifact is found

          # Check for the number of .zip files in the releases directory
          # We expect exactly one, as per user confirmation.
          NUM_ZIPS=$(find releases -maxdepth 1 -name "*.zip" -type f 2>/dev/null | wc -l)

          if [ "${NUM_ZIPS}" -eq 1 ]; then
            # Exactly one .zip file found, this is the expected scenario.
            SOURCE_ZIP_PATH=$(find releases -maxdepth 1 -name "*.zip" -type f -print -quit)
            ACTUAL_ARTIFACT_BASENAME=$(basename "${SOURCE_ZIP_PATH}")
            
            echo "Found unique artifact in releases/: ${SOURCE_ZIP_PATH}"
            echo "Using actual filename for artifact: ${ACTUAL_ARTIFACT_BASENAME}"
            
            # Move the found artifact to the current directory for upload
            mv "${SOURCE_ZIP_PATH}" "./${ACTUAL_ARTIFACT_BASENAME}"
            
            ARTIFACT_PATH="./${ACTUAL_ARTIFACT_BASENAME}"
            ARTIFACT_NAME="${ACTUAL_ARTIFACT_BASENAME}"
            echo "Prepared artifact for upload: ${ARTIFACT_NAME}"
          elif [ "${NUM_ZIPS}" -gt 1 ]; then
            echo "Error: Multiple .zip files found in releases/ (${NUM_ZIPS} found). Expected only one."
            echo "Proceeding to create a placeholder artifact."
            # ARTIFACT_NAME remains empty, will trigger placeholder creation
          else # NUM_ZIPS is 0
            echo "Error: No .zip artifact found in releases/."
            echo "Proceeding to create a placeholder artifact."
            # ARTIFACT_NAME remains empty, will trigger placeholder creation
          fi

          # If ARTIFACT_NAME is still empty, it means no suitable zip was found (or too many).
          # Fall back to creating a placeholder zip.
          if [ -z "${ARTIFACT_NAME}" ]; then
            echo "Creating a placeholder zip of the workspace as a fallback."
            zip -r "${ARTIFACT_NAME_DEFAULT}" . -x ".git/*" -x ".github/*" -x "node_modules/*" -x "releases/*" # Exclude releases to avoid zipping placeholder
            ARTIFACT_PATH="${ARTIFACT_PATH_DEFAULT}"
            ARTIFACT_NAME="${ARTIFACT_NAME_DEFAULT}"
            echo "Created placeholder artifact: ${ARTIFACT_NAME}"
          fi

          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          echo "artifact_path=${ARTIFACT_PATH}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # e.g., v1.0.0
          release_name: Release ${{ github.ref_name }}
          body_path: changelog.txt # Assumes changelog.txt is generated and committed by your release process
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prep_artifacts.outputs.artifact_path }}
          asset_name: ${{ steps.prep_artifacts.outputs.artifact_name }}
          asset_content_type: application/zip
